name: CD Pipeline

on:
  workflow_run:
    # CI Pipeline이 실행된 후 실행
    workflows: ["CI Pipeline"]
    types:
      - completed

jobs:
  deploy:
    # 리눅스 서버의 Runner에서 실행
    runs-on: self-hosted
    env:
      # 공통 환경 변수 선언
      # PostgreSQL
      PG_HOST: ${{ secrets.PG_HOST }}
      PG_PORT: "5432"
      PG_DATABASE: ${{ secrets.PG_DATABASE }}
      PG_USER: ${{ secrets.PG_USER }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}

      # API Keys
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      SERPAPI_KEY: ${{ secrets.SERPAPI_KEY }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}

      # Webshare Proxy
      PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
      PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
    steps:
      # 현재 레포지토리 가져오기
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # DEPLOY-CONFIGS 레포지토리 가져오기
      - name: Checkout deploy-configs repository
        uses: actions/checkout@v4
        with:
          repository: umc-8th-Channeling/DEPLOY-CONFIGS
          path: deploy-configs
      
      # Docker 로그인
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # fastapi-app이 실행중인 경우 중지
      - name: Stop fastapi-app
        run: |
          cd deploy-configs
          docker-compose stop fastapi-app || true
          docker-compose rm -f fastapi-app || true
      
      # kafka-consumer가 실행중인 경우 중지
      - name: Stop kafka-consumer
        run: |
          cd deploy-configs
          
          # overview-consumer 중지
          docker-compose stop overview-consumer || true
          docker-compose rm -f overview-consumer || true
          
          # analysis-consumer 중지
          docker-compose stop analysis-consumer || true
          docker-compose rm -f analysis-consumer || true

          # idea-consumer 중지
          docker-compose stop idea-consumer || true
          docker-compose rm -f idea-consumer || true

      # 이전 Docker 이미지 제거
      - name: Clean up old Docker images
        run: |
          # channeling-llm의 이전 Docker 이미지 제거(latest 제외)
          docker images ${{ secrets.DOCKER_USERNAME }}/channeling-llm -q | xargs -r docker rmi -f

          # dangling 이미지 제거
          docker image prune -f
      
      # Docker 이미지 Pull
      - name: Pull Docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/channeling-llm:latest

      # fastapi-app 다시 실행
      - name: Deploy fastapi-app
        working-directory: deploy-configs
        run: |
          # 환경 변수가 job 레벨에서 선언되어 자동으로 전달됨
          docker-compose up -d --no-deps fastapi-app

      # overview-consumer 다시 실행
      - name: Deploy overview-consumer
        working-directory: deploy-configs
        run: |
          # 환경 변수가 job 레벨에서 선언되어 자동으로 전달됨
          docker-compose up -d --no-deps overview-consumer

      # analysis-consumer 다시 실행
      - name: Deploy analysis-consumer
        working-directory: deploy-configs
        run: |
          # 환경 변수가 job 레벨에서 선언되어 자동으로 전달됨
          docker-compose up -d --no-deps analysis-consumer

      # idea-consumer 다시 실행
      - name: Deploy idea-consumer
        working-directory: deploy-configs
        run: |
          # 환경 변수가 job 레벨에서 선언되어 자동으로 전달됨
          docker-compose up -d --no-deps idea-consumer

        